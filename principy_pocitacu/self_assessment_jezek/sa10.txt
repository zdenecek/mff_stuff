
4)

Problém programu je omezená přesnost výpočtu. I přesto, že je výsledek vyjádřitelný ve formátu
fixed point 5.3, nesmíme zapomenou, že po násobení bude posledních 3+3 cifer reprezentovat desetinnou část,
na celou část tedy zbydou dvě cifry a zbytek bude ořezán - to odpovídá špatnému výsledku, poslední dvě cifry 29 
ve dvojkovém zápisu jsou 01.

Řešením je zvýšit přesnost, a to přetypováním jednoho ze součinitelů na například uint32:

x = uint32(x) 

před výpočtem násobení.

----------------------------------------------------------------------------

5)

(5 << 3 // 3 << 3) << 3 nemůže vyjít jinak než 1, protože počítáme celou část výsledku dělení.

Vylepšit bychom to mohli takto:

(5 << 3 // 3) 

Rozepsáno:

(5 // (3*2^-3)) = 5 / 3 * 2^3, což je přesně to, co jsme chtěli.

Při dělení desetinným číslem je už buď potřeba posunout dělenec (místo dělitele, na druhou stranu),
8 cifer už ale máme skoro zaplňěných, takže pro dostatečný posun a přesnost musíme využít jiný typ.

Implementace:

x = uint16(x) << 3 # zmenime z 13.3 na 10.6
y = uint16(y) # nemusime posouvat, hned bychom zase posouvali zpet
z = x // y
z = uint8(z) # nemusime posouvat, posunuli jsme si delitele
print(z / (1 << 3)) 

----------------------------------------------------------------------------

7)

a) 5/3 			= 1.66… = 1.1010101 * 2^0

b) 7/3 			= 2,33… = 1.0010101 * 2^1

c) 23/6,25 		= 3,68…	= 1.1101011 * 2^1

d) 30/6,875 	= 4,36… = 1.0001011 * 2^2

e) 30,5/5,875 	= 5,19… = 1.0100110 * 2^2

Je to přesnější, protože můžeme na desetinnou část využít veškeré bity zbývající po vyjádření
celé části, na rozdíl od fixed point 5.3, kde využijeme vždy 3 bity, zde to bude více, nebo stejně,
méně to být nemůže, to by původní fixed point reprezentace přetekla (takže může a byli bychom značně
přesnější)